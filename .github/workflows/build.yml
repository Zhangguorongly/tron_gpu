name: Build Tron GPU Vanity Generator

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 180   # 首次安装 CUDA + VS 可能较久

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1) 安装 CUDA（最新可用），并把 nvcc 路径加入 PATH
      - name: Install CUDA via Chocolatey (latest) + set PATH
        shell: powershell
        run: |
          choco install cuda -y --no-progress
          $cudaRoot = (Get-ChildItem "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA" | Sort-Object Name -Descending | Select-Object -First 1).FullName
          echo "CUDA_PATH=$cudaRoot" >> $env:GITHUB_ENV
          echo "$cudaRoot\bin"       >> $env:GITHUB_PATH
          echo "$cudaRoot\libnvvp"   >> $env:GITHUB_PATH
          & "$cudaRoot\bin\nvcc.exe" --version

      # 2) 安装 VS2022 Build Tools（含 C++ 工具链 和 Windows SDK）
      - name: Install Visual Studio 2022 Build Tools (MSVC + SDK)
        shell: powershell
        run: |
          choco install visualstudio2022buildtools -y --no-progress `
            --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools `
                                  --add Microsoft.VisualStudio.Component.Windows10SDK.19041 `
                                  --includeRecommended --includeOptional --quiet --norestart"

      # 3) 安装 CMake 和 Ninja（避免走 MSBuild 的 CUDA targets）
      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Install Ninja
        shell: powershell
        run: choco install ninja -y --no-progress

      # 4) vcpkg 安装 OpenSSL（提供 OpenSSL::Crypto 给 CMake）
      - name: Install vcpkg + OpenSSL
        shell: powershell
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg install openssl:x64-windows

      # 5) 进入 MSVC 环境 (vcvars64.bat) 后，用 CMake+Ninja 配置并编译
      - name: Configure & Build (vcvars64 + CMake + Ninja)
        shell: cmd
        run: |
          :: 查找 VS 安装路径
          for /f "usebackq tokens=*" %%i in (`"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do set VSINSTALL=%%i
          call "%VSINSTALL%\VC\Auxiliary\Build\vcvars64.bat"

          :: 用 nvcc + MSVC (cl.exe) 作为 host compiler 进行配置
          cmake -G "Ninja" ^
            -B build -S . ^
            -DCUDAToolkit_ROOT="%CUDA_PATH%" ^
            -DCMAKE_CUDA_COMPILER="%CUDA_PATH%\bin\nvcc.exe" ^
            -DCMAKE_CUDA_HOST_COMPILER=cl.exe ^
            -DCMAKE_CUDA_ARCHITECTURES=89 ^
            -DCMAKE_TOOLCHAIN_FILE="%GITHUB_WORKSPACE%\vcpkg\scripts\buildsystems\vcpkg.cmake"

          cmake --build build --parallel

      - name: Upload EXE artifact
        uses: actions/upload-artifact@v4
        with:
          name: tron_gpu_exe
          path: build/tron_gpu.exe   # Ninja 默认输出在 build 根目录
