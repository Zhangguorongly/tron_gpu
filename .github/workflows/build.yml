name: Build Tron GPU Vanity Generator

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 120

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 安装 CUDA（最新可用），并把 nvcc 路径加入 PATH 和环境变量
      - name: Install CUDA via Chocolatey (latest) + set PATH
        shell: powershell
        run: |
          choco install cuda -y --no-progress
          $cudaRoot = (Get-ChildItem "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA" | Sort-Object Name -Descending | Select-Object -First 1).FullName
          echo "CUDA_PATH=$cudaRoot" >> $env:GITHUB_ENV
          echo "$cudaRoot\bin"       >> $env:GITHUB_PATH
          echo "$cudaRoot\libnvvp"   >> $env:GITHUB_PATH
          & "$cudaRoot\bin\nvcc.exe" --version

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Install Ninja (use Ninja generator, avoid MSBuild CUDA targets)
        shell: powershell
        run: choco install ninja -y --no-progress

      - name: Install vcpkg + OpenSSL
        shell: powershell
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg install openssl:x64-windows

      # 用 Ninja 生成器，显式指定 CUDAToolkit_ROOT 和 CMAKE_CUDA_COMPILER=nvcc
      - name: Configure (CMake + Ninja)
        shell: bash
        run: >
          cmake -G "Ninja"
          -B build -S .
          -DCUDAToolkit_ROOT="$CUDA_PATH"
          -DCMAKE_CUDA_COMPILER="$CUDA_PATH/bin/nvcc.exe"
          -DCMAKE_CUDA_ARCHITECTURES=89
          -DCMAKE_TOOLCHAIN_FILE="${GITHUB_WORKSPACE}\vcpkg\scripts\buildsystems\vcpkg.cmake"

      - name: Build
        run: cmake --build build --parallel

      - name: Upload EXE artifact
        uses: actions/upload-artifact@v4
        with:
          name: tron_gpu_exe
          path: build/tron_gpu.exe   # Ninja 默认输出到 build 根目录
